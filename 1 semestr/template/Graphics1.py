# импорт библиотек matplotlib, numpy, pandas (понадобится для считывания данных)
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
x = [0,1,2,3,4]
y = [0,2,4,6,8]

# Инициализировать рисунок/Figure
# dpi -- количество пикселей на дюйм в рисунке
# figsize -- пропорции "поля" рисунка
plt.figure(figsize=(8,5), dpi=100)

# Line 1

# Основные возможные аргументы функции plot. По умолчанию необходимы только x и y
#plt.plot(x,y, label='2x', color='red', linewidth=2, marker='.', linestyle='--', markersize=10, markeredgecolor='blue')

#нарисуем график первой функции -- 2x
plt.plot(x,y, 'b^--', label='2x')

## Line 2

# С помощью numpy мы можем создавать массив из чисел с определенным интервалом функцией arange. np.linspace(..) делает то же самое, но с целыми числами
x2 = np.arange(0,4.5,0.5)

# Нарисуем часть второго графика как сплошную кривую -- квадрат значений x2
# Поскольку x2 -- массив numpy, мы можем это сделать просто "возведя в квадрат" массив
plt.plot(x2[:6], x2[:6]**2, 'r', label='X^2')

# Нарисуем часть графика пунктиром. 'r' после x и y означает красный цвет, '--' - рисовку пунктиром 
plt.plot(x2[5:], x2[5:]**2, 'r--')

# Добавим заголовок (в fontdict нужен словарь, шрифт должен поддерживаться matplotlib'ом)
plt.title('Our First Graph!', fontdict={'fontname': 'sans-serif', 'fontsize': 20})

# Подпишем оси
plt.xlabel('X Axis')
plt.ylabel('Y Axis')

# Зададим какие-нибудь корявые "штрихи"/ticks на осях. в эти фунции можно передать любой список
plt.xticks([0,1.12,2.66,3,3.5])
plt.yticks([0,2,4,6,8,10])

# сделаем по этим штрихам сетку
plt.grid()
# функция легенды графика для отображения label'ов графиков
plt.legend()

# Можем сохранить график в высоком качестве
plt.savefig('mygraph.png', dpi=300)

# И вызвать эту функцию чтобы график сразу после отрисовки не пропал, пока мы его не закроем
plt.show()
# принцип настройки схожий, но вместо plt.plot используем plt.bar
labels = ['A', 'B', 'C']
values = [1,4,2]

plt.figure(figsize=(5,3), dpi=100)

bars = plt.bar(labels, values)

plt.savefig('barchart.png', dpi=300)

plt.show()
# создадим два списка чисел от 0 до 49 и составим список S попарных сумм элементов двух списков
# посмотрим распределение получившихся чисел построив гистограмму

x = [i for i in range(50)]
y = [j for j in range(50)]
S = [i + j for i in x for j in y]

#bins задает количество столбцов гистограммы. если не задать, подберутся автоматически
plt.hist(S, bins = 20)

plt.show()
# получился треугольник с центром около 50
# сложить два равномерных распределения -- самый простой способ получить треугольное распределение
# попробуем сгенерировать случайные числа из нормального распределения и посмотреть, как оно выглядит

# среднее
pos = 0

# параметр отвечающий за разброс
scale = 10

# размер массива случайных чисел (сколько их сгенерируем)
size = 10000000

# используем функцию из подраздела random библиотеки numpy и передадим наши параметры
values = np.random.normal(pos, scale, size)

# строим гистограмму с 100 блоков
plt.hist(values, 100)

plt.show()
plt.pie([0.5, 0.5, 0.01], labels = ['No','No, but in orange','Perhaps'])

plt.title('What are the chances that I will wake up early tomorrow?')

plt.show()
fig = plt.figure(figsize=(16, 9))  # создали рисунок/Figure Fig пропорциями 16:9
ax1 = fig.add_subplot(
    211)  # создали Axes (подграфик) ax1 в серии из 2 графиков, поставили на позицию [1,1] -- левый верхний угол
ax2 = fig.add_subplot(
    212)  # создали Axes ax2 в серии из 2 графиков, поставили на позицию [1,2] -- первый график во второй "строке" графиков

# сгенерируем данные для какой-нибудь гистограммы
values = np.random.normal(0, 10, 1000)

# строим гистограмму с 50 блоками
ax1.hist(values, 50)
ax1.grid()  # делаем сетку на графике ax1

x = [i for i in range(50)]
y = [j ** 1.5 for j in x]

ax2.plot(y, x, 'b.', label='blue dots')
ax2.plot(x, y, 'r--', label='red dashed line')
ax2.set_title('second graph')  # здесь название функции немного отличается от случая, когда мы вызывали напрямую из plt!

ax2.grid()  # делаем сетку на графике ax2
ax2.legend()  # делаем легенду на графике ax2
plt.savefig('my1graph.png', dpi=300)
fig.show()
fig = plt.figure(figsize = (16,9)) # создали рисунок/Figure Fig пропорциями 16:9
ax1 = fig.add_subplot(111) # допустим, больше 1 графика нам не надо

x_measured = [1.01, 2.59, 3.03, 5.40, 7.33]
y_measured = [0.41, 0.84, 1.11, 3.22, 5.00]

#используем встроенный линейный интерполятор чтобы посчитать значения прямой МНК в точках, на которых будем строить нашу прямую
#Поскольку мы хотим прямую, нам достаточно двух точек -- начало и конец прямой
x = [0.5, 9.0]
y = np.interp(x, x_measured, y_measured)

# ставим точки функцией scatter, точки будем ставить крестиком
ax1.scatter(x_measured, y_measured, marker='x')

# поставим кресты погрешностей, linestyle = None, чтобы кресты не соединялись прямыми
ax1.errorbar(x_measured, y_measured, yerr=0.2, xerr = 0.1, color = 'k', linestyle = 'None')

#построим красную прямую МНК
ax1.plot(x,y, 'r')

ax1.grid() # делаем сетку

# для готового графика для лабы по общефизу не хватает только названия, подписанных осей и легенды, но это вы уже умеете
# успехов!